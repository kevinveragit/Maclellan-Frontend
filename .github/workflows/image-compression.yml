name: Refresh Token, Compress, and Upload Images & Video Thumbnails Incrementally

on:
  push:
    branches:
      - main

jobs:
  compress-media:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install Dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip imagemagick jq ffmpeg

      # Step 4: Refresh Dropbox Access Token
      - name: Refresh Dropbox Access Token
        id: refresh_token
        env:
          CLIENT_ID: ${{ secrets.DROPBOX_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.DROPBOX_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
        run: |
          response=$(curl -X POST https://api.dropboxapi.com/oauth2/token \
            --data "grant_type=refresh_token&refresh_token=$REFRESH_TOKEN&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET" \
            -H "Content-Type: application/x-www-form-urlencoded")
          
          ACCESS_TOKEN=$(echo $response | jq -r '.access_token')
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      # Step 5: Set Up Git Configuration
      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      # Step 6: Process Images
      - name: Search and Process Images Incrementally
        env:
          ACCESS_TOKEN: ${{ steps.refresh_token.outputs.access_token }}
        run: |
          mkdir -p downloaded_images compressed_images
          echo "Searching for all image files in Dropbox..."

          # Search for image files
          response=$(curl -X POST https://api.dropboxapi.com/2/files/search_v2 \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            --header "Content-Type: application/json" \
            --data '{
              "query": ".jpg OR .jpeg OR .png OR .gif OR .heic",
              "options": {
                "filename_only": true,
                "file_status": "active",
                "max_results": 1000
              }
            }')

          # Process each image
          echo "$response" | jq -r '.matches[] | select(.metadata.metadata[".tag"] == "file") | .metadata.metadata.path_lower' \
          | while read -r path; do
              filename=$(basename "$path")
              filename=$(echo "$filename" | tr ' ' '_')  # Replace spaces with underscores
              
              if [ ! -f "compressed_images/$filename" ]; then
                echo "Generating temporary link for $path..."
                temp_link_response=$(curl -X POST https://api.dropboxapi.com/2/files/get_temporary_link \
                  --header "Authorization: Bearer $ACCESS_TOKEN" \
                  --header "Content-Type: application/json" \
                  --data "{\"path\": \"$path\"}")
                temp_link=$(echo "$temp_link_response" | jq -r '.link')

                if [ "$temp_link" != "null" ]; then
                  echo "Downloading $filename from $temp_link"
                  curl -L "$temp_link" -o "downloaded_images/$filename"

                  # Compress the image
                  echo "Compressing $filename..."
                  mogrify -path compressed_images -resize 50% "downloaded_images/$filename" || echo "Error compressing $filename"

                  # Stage the compressed image
                  git add compressed_images/$filename
                else
                  echo "Failed to get temporary link for $path"
                fi
              else
                echo "$filename is already compressed, skipping."
              fi
          done

      # Step 7: Commit and Push Compressed Images
      - name: Commit and Push Compressed Images
        env:
          ACCESS_TOKEN_2_WEBRENDHQ: ${{ secrets.ACCESS_TOKEN_2_WEBRENDHQ }}  # Ensure this PAT has write access
        run: |
          git commit -m "Add compressed images" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.ACCESS_TOKEN_2_WEBRENDHQ }}@github.com/WebRendHQ/MacLellan-Frontend.git

      # Step 8: Process Video Thumbnails
      - name: Search and Process Video Thumbnails Incrementally
        env:
          ACCESS_TOKEN: ${{ steps.refresh_token.outputs.access_token }}
        run: |
          mkdir -p downloaded_video_thumbnails compressed_video_thumbnails
          echo "Searching for all video files in Dropbox..."

          # Search for video files
          response=$(curl -X POST https://api.dropboxapi.com/2/files/search_v2 \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            --header "Content-Type: application/json" \
            --data '{
              "query": ".mp4 OR .avi OR .mkv OR .mov",
              "options": {
                "filename_only": true,
                "file_status": "active",
                "max_results": 1000
              }
            }')

          # Process each video
          echo "$response" | jq -r '.matches[] | select(.metadata.metadata[".tag"] == "file") | .metadata.metadata.path_lower' \
          | while read -r path; do
              # Replace any video extension with .jpg
              filename=$(basename "$path")
              filename="${filename%.*}.jpg"
              filename=$(echo "$filename" | tr ' ' '_')  # Replace spaces with underscores

              if [ ! -f "compressed_video_thumbnails/$filename" ]; then
                echo "Generating thumbnail for $path..."
                temp_link_response=$(curl -X POST https://api.dropboxapi.com/2/files/get_temporary_link \
                  --header "Authorization: Bearer $ACCESS_TOKEN" \
                  --header "Content-Type: application/json" \
                  --data "{\"path\": \"$path\"}")
                temp_link=$(echo "$temp_link_response" | jq -r '.link')

                temp_link_cleaned=$(echo "$temp_link" | cut -d'#' -f1)  # Clean the URL fragment
                
                if [ "$temp_link_cleaned" != "null" ]; then
                  # Extract thumbnail using ffmpeg
                  ffmpeg -y -i "$temp_link_cleaned" -ss 00:00:02 -vframes 1 -q:v 2 "downloaded_video_thumbnails/$filename" || echo "Failed to generate thumbnail for $filename"

                  # Compress the thumbnail
                  echo "Compressing thumbnail $filename..."
                  mogrify -path compressed_video_thumbnails -resize 50% "downloaded_video_thumbnails/$filename" || echo "Error compressing thumbnail $filename"

                  # Stage the compressed thumbnail
                  git add compressed_video_thumbnails/$filename

                  # Remove the original downloaded thumbnail to save space
                  rm "downloaded_video_thumbnails/$filename"
                else
                  echo "Failed to get temporary link for $path"
                fi
              else
                echo "$filename is already compressed, skipping."
              fi
          done

      # Step 9: Commit and Push Compressed Video Thumbnails
      - name: Commit and Push Compressed Video Thumbnails
        env:
          ACCESS_TOKEN_2_WEBRENDHQ: ${{ secrets.ACCESS_TOKEN_2_WEBRENDHQ }}  # Ensure this PAT has write access
        run: |
          git commit -m "Add compressed video thumbnails" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.ACCESS_TOKEN_2_WEBRENDHQ }}@github.com/WebRendHQ/MacLellan-Frontend.git

      # Step 10: Clean Up Downloaded Files (Optional)
      - name: Clean Up Downloaded Files
        run: |
          rm -rf downloaded_images downloaded_video_thumbnails

      # Step 11: Debug Step: List Downloaded and Compressed Media
      - name: List Downloaded and Compressed Media
        run: |
          echo "Downloaded Images:"
          ls -l downloaded_images || echo "No downloaded images."
          echo "Compressed Images:"
          ls -l compressed_images || echo "No compressed images."
          echo "Downloaded Video Thumbnails:"
          ls -l downloaded_video_thumbnails || echo "No downloaded video thumbnails."
          echo "Compressed Video Thumbnails:"
          ls -l compressed_video_thumbnails || echo "No compressed video thumbnails."
