      # Step 6: Search and process video thumbnails incrementally (saved to video_compressed_images)
      - name: Search and process video thumbnails incrementally
        env:
          ACCESS_TOKEN: ${{ steps.refresh_token.outputs.access_token }}
        run: |
          mkdir -p downloaded_video_thumbnails video_compressed_images
          echo "Searching for all video files in Dropbox..."

          # Search for files with video extensions recursively
          response=$(curl -X POST https://api.dropboxapi.com/2/files/search_v2 \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            --header "Content-Type: application/json" \
            --data '{
              "query": ".mp4 OR .avi OR .mkv OR .mov",
              "options": {
                "filename_only": true,
                "file_status": "active",
                "max_results": 1000
              }
            }')

          # Process each video one by one to extract thumbnails
          echo "$response" | jq -r '.matches[] | select(.metadata.metadata[".tag"] == "file") | .metadata.metadata.path_lower' \
          | while read -r path; do
              filename=$(basename "$path" .mp4).jpg  # Use the video name without mp4 extension for the thumbnail
              filename=$(echo "$filename" | tr ' ' '_')  # Replace spaces with underscores

              if [ ! -f "video_compressed_images/$filename" ]; then
                echo "Generating thumbnail for $path..."
                temp_link_response=$(curl -X POST https://api.dropboxapi.com/2/files/get_temporary_link \
                  --header "Authorization: Bearer $ACCESS_TOKEN" \
                  --header "Content-Type: application/json" \
                  --data "{\"path\": \"$path\"}")
                temp_link=$(echo "$temp_link_response" | jq -r '.link')

                temp_link_cleaned=$(echo "$temp_link" | cut -d'#' -f1)  # Clean the URL fragment
                
                if [ "$temp_link_cleaned" != "null" ]; then
                  # Use ffmpeg to extract the thumbnail from the cleaned temporary video link
                  ffmpeg -y -i "$temp_link_cleaned" -ss 00:00:02 -vframes 1 -q:v 2 "downloaded_video_thumbnails/$filename" || echo "Failed to generate thumbnail for $filename"

                  # Compress the thumbnail
                  echo "Compressing thumbnail $filename..."
                  mkdir -p video_compressed_images
                  mogrify -path video_compressed_images -resize 50% "downloaded_video_thumbnails/$filename" || echo "Error compressing thumbnail $filename"

                  # Commit and push the compressed thumbnail
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
                  git config --global user.name "github-actions[bot]"
                  git add video_compressed_images/$filename || echo "No matching files"
                  git commit -m "Add compressed video thumbnail: $filename" || echo "No changes to commit"
                  git push https://x-access-token:${{ secrets.ACTIONS_DEPLOY_TOKEN }}@github.com/kevinveragit/MacLellan-Frontend.git

                  # Remove the original downloaded thumbnail to save space
                  rm "downloaded_video_thumbnails/$filename"
                else
                  echo "Failed to get temporary link for $path"
                fi
              else
                echo "$filename is already compressed, skipping."
              fi
          done