name: Refresh Token, Compress, and Upload Images

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight. Adjust as needed.

jobs:
  refresh-download-compress-commit:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install Dropbox CLI and Python dependencies
      - name: Install Dropbox CLI and Python packages
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip imagemagick
          pip3 install dropbox-cli

      # Refresh Dropbox Access Token
      - name: Refresh Dropbox Access Token
        id: refresh_token
        env:
          CLIENT_ID: ${{ secrets.DROPBOX_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.DROPBOX_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
        run: |
          response=$(curl -X POST https://api.dropboxapi.com/oauth2/token \
            --data "grant_type=refresh_token&refresh_token=$REFRESH_TOKEN&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET" \
            -H "Content-Type: application/x-www-form-urlencoded")
          
          ACCESS_TOKEN=$(echo $response | jq -r '.access_token')
          echo "::set-output name=access_token::$ACCESS_TOKEN"

      # Download images from any folder in Dropbox using refreshed access token
      - name: Download images from Dropbox
        env:
          ACCESS_TOKEN: ${{ steps.refresh_token.outputs.access_token }}
        run: |
          mkdir -p downloaded_images
          python3 -c "import dropbox; \
          dbx = dropbox.Dropbox('${{ steps.refresh_token.outputs.access_token }}'); \
          folder_path = '';  # Root folder of Dropbox \
          result = dbx.files_list_folder(folder_path, recursive=True); \
          for entry in result.entries: \
              if isinstance(entry, dropbox.files.FileMetadata) and entry.name.lower().endswith(('.jpg', '.jpeg', '.png')): \
                  metadata, res = dbx.files_download(entry.path_lower); \
                  with open(f'downloaded_images/{entry.name}', 'wb') as f: \
                      f.write(res.content);"

      # Compress images using ImageMagick
      - name: Compress images
        run: |
          mkdir -p compressed_images
          for img in downloaded_images/*; do
            mogrify -path compressed_images -resize 50% "$img"
          done

      # Commit and push compressed images
      - name: Commit and push compressed images
        run: |
          git config --local user.email "github-actions@github.com"
          git config --local user.name "GitHub Actions"
          git add compressed_images/
          git commit -m "Add compressed images"
          git push origin main
