name: Process All Dropbox Media

on:
  push:
    branches:
      - main

jobs:
  process-media:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip imagemagick jq ffmpeg

      - name: Refresh Dropbox Access Token
        id: refresh_token
        env:
          CLIENT_ID: ${{ secrets.DROPBOX_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.DROPBOX_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
        run: |
          response=$(curl -X POST https://api.dropboxapi.com/oauth2/token \
            --data "grant_type=refresh_token&refresh_token=$REFRESH_TOKEN&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET" \
            -H "Content-Type: application/x-www-form-urlencoded")
          ACCESS_TOKEN=$(echo $response | jq -r '.access_token')
          echo "::set-output name=access_token::$ACCESS_TOKEN"

      - name: Process all Dropbox media
        env:
          ACCESS_TOKEN: ${{ steps.refresh_token.outputs.access_token }}
        run: |
          mkdir -p compressed_images compressed_video_thumbnails

          process_image() {
            local path="$1"
            local filename="$2"
            
            if [ ! -f "compressed_images/$filename" ]; then
              echo "Processing image: $path"
              encoded_path=$(printf '%s' "$path" | jq -sRr @uri)
              temp_link_response=$(curl -X POST https://api.dropboxapi.com/2/files/get_temporary_link \
                --header "Authorization: Bearer $ACCESS_TOKEN" \
                --header "Content-Type: application/json" \
                --data "{\"path\": \"$encoded_path\"}")
              
              temp_link=$(echo "$temp_link_response" | jq -r '.link')
              if [ "$temp_link" != "null" ] && [ -n "$temp_link" ]; then
                curl -L "$temp_link" -o "temp_$filename"
                mogrify -path compressed_images -resize 50% "temp_$filename"
                rm "temp_$filename"
                git add compressed_images/$filename
                git commit -m "Add compressed image: $filename" || echo "No changes to commit for $filename"
              else
                echo "Failed to get temporary link for $path"
                echo "Response: $temp_link_response"
              fi
            else
              echo "$filename is already compressed, skipping."
            fi
          }

          process_video_thumbnail() {
            local path="$1"
            local filename_without_ext="$2"
            
            if [ ! -f "compressed_video_thumbnails/${filename_without_ext}.jpg" ]; then
              echo "Processing video thumbnail: $path"
              encoded_path=$(printf '%s' "$path" | jq -sRr @uri)
              thumbnail_response=$(curl -X POST https://content.dropboxapi.com/2/files/get_thumbnail_v2 \
                --header "Authorization: Bearer $ACCESS_TOKEN" \
                --header "Dropbox-API-Arg: {\"resource\": {\"path\": \"$encoded_path\"}, \"format\": \"jpeg\", \"size\": \"w1024h768\", \"mode\": \"bestfit\"}" \
                --output "temp_${filename_without_ext}.jpg")
              
              if [ -f "temp_${filename_without_ext}.jpg" ]; then
                mogrify -path compressed_video_thumbnails -resize 50% "temp_${filename_without_ext}.jpg"
                rm "temp_${filename_without_ext}.jpg"
                git add compressed_video_thumbnails/${filename_without_ext}.jpg
                git commit -m "Add compressed video thumbnail: ${filename_without_ext}.jpg" || echo "No changes to commit for ${filename_without_ext}.jpg"
              else
                echo "Failed to download thumbnail for $path"
                echo "Response: $thumbnail_response"
              fi
            else
              echo "${filename_without_ext}.jpg thumbnail already exists, skipping."
            fi
          }

          # Search for all images and videos
          search_response=$(curl -X POST https://api.dropboxapi.com/2/files/search_v2 \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            --header "Content-Type: application/json" \
            --data '{
              "query": ".jpg OR .jpeg OR .png OR .gif OR .heic OR .mp4 OR .avi OR .mkv OR .mov",
              "options": {
                "file_status": "active",
                "filename_only": false,
                "max_results": 5000
              },
              "match_field_options": {
                "include_highlights": false
              }
            }')

          echo "Debug: Search API Response"
          echo "$search_response" | jq '.'

          if ! echo "$search_response" | jq -e '.' >/dev/null 2>&1; then
            echo "Error: Invalid JSON response from Dropbox search API"
            echo "Raw response:"
            echo "$search_response"
            exit 1
          fi

          echo "$search_response" | jq -c '.matches[]' | while read -r match; do
            if [ -z "$match" ]; then
              echo "Warning: Empty match, skipping"
              continue
            fi
            
            path=$(echo "$match" | jq -r '.metadata.metadata.path_display')
            if [ -z "$path" ] || [ "$path" = "null" ]; then
              echo "Warning: Invalid path for match, skipping"
              echo "Match data: $match"
              continue
            fi
            
            filename=$(basename "$path")
            extension="${filename##*.}"
            filename_without_ext="${filename%.*}"

            case "$extension" in
              jpg|jpeg|png|gif|heic)
                process_image "$path" "$filename"
                ;;
              mp4|avi|mkv|mov)
                process_video_thumbnail "$path" "$filename_without_ext"
                ;;
              *)
                echo "Skipping unsupported file: $path"
                ;;
            esac
          done

          # Push all changes
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git push https://x-access-token:${{ secrets.ACTIONS_DEPLOY_TOKEN }}@github.com/kevinveragit/MacLellan-Frontend.git

      - name: List processed media
        run: |
          echo "Compressed Images:"
          ls -l compressed_images
          echo "Compressed Video Thumbnails:"
          ls -l compressed_video_thumbnails