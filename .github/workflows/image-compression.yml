name: Refresh Token, Compress, and Upload Images & Video Thumbnails Incrementally

on:
  push:
    branches:
      - main

jobs:
  compress-media:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install Python, ImageMagick, ffmpeg, and jq
      - name: Install Python, ImageMagick, ffmpeg, and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip imagemagick jq ffmpeg

      # Step 4: Refresh Dropbox Access Token
      - name: Refresh Dropbox Access Token
        id: refresh_token
        env:
          CLIENT_ID: ${{ secrets.DROPBOX_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.DROPBOX_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
        run: |
          response=$(curl -X POST https://api.dropboxapi.com/oauth2/token \
            --data "grant_type=refresh_token&refresh_token=$REFRESH_TOKEN&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET" \
            -H "Content-Type: application/x-www-form-urlencoded")
          
          ACCESS_TOKEN=$(echo $response | jq -r '.access_token')
          echo "::set-output name=access_token::$ACCESS_TOKEN"

      # Step 5: List and process all image files with pagination
      - name: List and process all image files
        env:
          ACCESS_TOKEN: ${{ steps.refresh_token.outputs.access_token }}
        run: |
          mkdir -p downloaded_images compressed_images
          echo "Listing all files in Dropbox and filtering images..."

          # Initialize variables for pagination
          cursor=""
          has_more=true

          # Configure Git once before processing
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          while [ "$has_more" = true ]; do
            if [ -z "$cursor" ]; then
              # Initial call to list_folder
              response=$(curl -s -X POST https://api.dropboxapi.com/2/files/list_folder \
                --header "Authorization: Bearer $ACCESS_TOKEN" \
                --header "Content-Type: application/json" \
                --data '{
                  "path": "",
                  "recursive": true,
                  "include_media_info": true,
                  "include_deleted": false
                }')
            else
              # Subsequent calls to list_folder/continue
              response=$(curl -s -X POST https://api.dropboxapi.com/2/files/list_folder/continue \
                --header "Authorization: Bearer $ACCESS_TOKEN" \
                --header "Content-Type: application/json" \
                --data "{\"cursor\": \"$cursor\"}")
            fi

            # Extract entries and cursor
            entries=$(echo "$response" | jq -c '.entries[]?')
            cursor=$(echo "$response" | jq -r '.cursor')
            has_more=$(echo "$response" | jq -r '.has_more')

            # Process each entry
            echo "$entries" | while read -r entry; do
              tag=$(echo "$entry" | jq -r '.[".tag"]')
              if [ "$tag" == "file" ]; then
                mime_type=$(echo "$entry" | jq -r '.media_info.metadata.mime_type // empty')
                if [[ "$mime_type" == image/* ]]; then
                  path=$(echo "$entry" | jq -r '.path_lower')
                  filename=$(basename "$path")
                  # Replace spaces with underscores and preserve folder structure
                  relative_path=$(dirname "$path" | sed 's|^/||') # Remove leading slash
                  target_dir="compressed_images/$relative_path"
                  mkdir -p "$target_dir"
                  sanitized_filename=$(echo "$filename" | tr ' ' '_')
                  compressed_image_path="$target_dir/$sanitized_filename"

                  if [ ! -f "$compressed_image_path" ]; then
                    echo "Generating temporary link for $path..."
                    temp_link_response=$(curl -s -X POST https://api.dropboxapi.com/2/files/get_temporary_link \
                      --header "Authorization: Bearer $ACCESS_TOKEN" \
                      --header "Content-Type: application/json" \
                      --data "{\"path\": \"$path\"}")
                    temp_link=$(echo "$temp_link_response" | jq -r '.link')

                    if [ "$temp_link" != "null" ]; then
                      echo "Downloading $filename from $temp_link"
                      downloaded_image="downloaded_images/$sanitized_filename"
                      curl -s -L "$temp_link" -o "$downloaded_image"

                      # Compress the image
                      echo "Compressing $filename..."
                      mogrify -path "$target_dir" -resize 50% "$downloaded_image" || echo "Error compressing $filename"

                      # Stage the compressed image for commit
                      git add "$compressed_image_path" || echo "No matching files to add for $compressed_image_path"

                      # Remove the original downloaded image to save space
                      rm "$downloaded_image"
                    else
                      echo "Failed to get temporary link for $path"
                    fi
                  else
                    echo "$compressed_image_path is already compressed, skipping."
                  fi
                fi
              fi
            done
          done

          # Commit and push all compressed images at once
          git commit -m "Add compressed images from Dropbox" || echo "No new compressed images to commit"
          git push https://x-access-token:${{ secrets.ACTIONS_DEPLOY_TOKEN }}@github.com/kevinveragit/MacLellan-Frontend.git

      # Step 6: Search and process video thumbnails incrementally using get_thumbnail_v2
      - name: Search and process video thumbnails incrementally
        env:
          ACCESS_TOKEN: ${{ steps.refresh_token.outputs.access_token }}
        run: |
          mkdir -p downloaded_video_thumbnails compressed_video_thumbnails
          echo "Listing all files in Dropbox and filtering videos..."

          # Initialize variables for pagination
          cursor=""
          has_more=true

          # Configure Git once before processing (if not already configured)
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          while [ "$has_more" = true ]; do
            if [ -z "$cursor" ]; then
              # Initial call to list_folder
              response=$(curl -s -X POST https://api.dropboxapi.com/2/files/list_folder \
                --header "Authorization: Bearer $ACCESS_TOKEN" \
                --header "Content-Type: application/json" \
                --data '{
                  "path": "",
                  "recursive": true,
                  "include_media_info": true,
                  "include_deleted": false
                }')
            else
              # Subsequent calls to list_folder/continue
              response=$(curl -s -X POST https://api.dropboxapi.com/2/files/list_folder/continue \
                --header "Authorization: Bearer $ACCESS_TOKEN" \
                --header "Content-Type: application/json" \
                --data "{\"cursor\": \"$cursor\"}")
            fi

            # Extract entries and cursor
            entries=$(echo "$response" | jq -c '.entries[]?')
            cursor=$(echo "$response" | jq -r '.cursor')
            has_more=$(echo "$response" | jq -r '.has_more')

            # Process each entry
            echo "$entries" | while read -r entry; do
              tag=$(echo "$entry" | jq -r '.[".tag"]')
              if [ "$tag" == "file" ]; then
                mime_type=$(echo "$entry" | jq -r '.media_info.metadata.mime_type // empty')
                if [[ "$mime_type" == video/* ]]; then
                  path=$(echo "$entry" | jq -r '.path_lower')
                  video_filename=$(basename "$path")
                  thumbnail_filename="${video_filename%.*}-video.jpg"  # Use the video name with -video suffix
                  thumbnail_filename=$(echo "$thumbnail_filename" | tr ' ' '_')  # Replace spaces with underscores
                  relative_path=$(dirname "$path" | sed 's|^/||') # Remove leading slash
                  target_dir="compressed_video_thumbnails/$relative_path"
                  mkdir -p "$target_dir"
                  compressed_thumbnail_path="$target_dir/$thumbnail_filename"

                  if [ ! -f "$compressed_thumbnail_path" ]; then
                    echo "Generating thumbnail for $path..."
                    
                    # Use get_thumbnail_v2 to get a high-quality thumbnail
                    thumbnail_response=$(curl -s -X POST https://content.dropboxapi.com/2/files/get_thumbnail_v2 \
                      --header "Authorization: Bearer $ACCESS_TOKEN" \
                      --header "Dropbox-API-Arg: {\"resource\": {\"path\": \"$path\"}, \"format\": \"jpeg\", \"size\": \"w1024h768\"}" \
                      --output "downloaded_video_thumbnails/$thumbnail_filename")

                    if [ -f "downloaded_video_thumbnails/$thumbnail_filename" ]; then
                      # Compress the thumbnail
                      echo "Compressing thumbnail $thumbnail_filename..."
                      mogrify -path "$target_dir" -resize 50% "downloaded_video_thumbnails/$thumbnail_filename" || echo "Error compressing thumbnail $thumbnail_filename"

                      # Stage the compressed thumbnail for commit
                      git add "$compressed_thumbnail_path" || echo "No matching files to add for $compressed_thumbnail_path"

                      # Remove the original downloaded thumbnail to save space
                      rm "downloaded_video_thumbnails/$thumbnail_filename"
                    else
                      echo "Failed to get thumbnail for $path"
                    fi
                  else
                    echo "$compressed_thumbnail_path is already compressed, skipping."
                  fi
                fi
              fi
            done
          done

          # Commit and push all compressed thumbnails at once
          git commit -m "Add compressed video thumbnails from Dropbox" || echo "No new compressed video thumbnails to commit"
          git push https://x-access-token:${{ secrets.ACTIONS_DEPLOY_TOKEN }}@github.com/kevinveragit/MacLellan-Frontend.git

      # Debug Step: Check if images and thumbnails were downloaded and compressed
      - name: List downloaded and compressed media
        run: |
          echo "Downloaded Images:"
          ls -R downloaded_images
          echo "Compressed Images:"
          ls -R compressed_images
          echo "Downloaded Video Thumbnails:"
          ls -R downloaded_video_thumbnails
          echo "Compressed Video Thumbnails:"
          ls -R compressed_video_thumbnails
